// service-worker.js
// ① 버전만 바꾸면 새 캐시가 만들어집니다.
const CACHE_VERSION = 'v1.0.4';
const CACHE_NAME = `inopnc-pwa-${CACHE_VERSION}`;

// ② 오프라인에 필요한 "로컬" 파일만 넣으세요(외부 CDN 금지!)
const CORE_ASSETS = [
  'index.html',
  'manifest.json',
  'icon-192x192.png',
  'icon-512x512.png'
];

self.addEventListener('install', (event) => {
  console.log('[SW] install', CACHE_NAME);
  event.waitUntil((async () => {
    const cache = await caches.open(CACHE_NAME);
    try {
      await cache.addAll(CORE_ASSETS.map(p => new Request(p, { cache: 'reload' })));
      console.log('[SW] addAll OK');
    } catch (e) {
      console.error('[SW] addAll FAILED:', e);
      throw e; // 실패 원인 콘솔에서 확인
    }
    self.skipWaiting();
  })());
});

self.addEventListener('activate', (event) => {
  console.log('[SW] activate', CACHE_NAME);
  event.waitUntil((async () => {
    const keys = await caches.keys();
    await Promise.all(keys.filter(k => k !== CACHE_NAME).map(k => caches.delete(k)));
    await self.clients.claim();
  })());
});

// 네비게이션: 네트워크 우선, 실패 시 index.html 폴백
async function handleNavigate(request) {
  try {
    return await fetch(request);
  } catch (e) {
    console.warn('[SW] navigate fetch fail → fallback to index.html', e);
    const cache = await caches.open(CACHE_NAME);
    const cachedIndex = await cache.match('index.html');
    return cachedIndex || Response.error();
  }
}

self.addEventListener('fetch', (event) => {
  const req = event.request;
  if (req.method !== 'GET') return;

  if (req.mode === 'navigate') {
    event.respondWith(handleNavigate(req));
    return;
  }
  const url = new URL(req.url);

  // 동일 출처 정적 파일: 캐시 우선 + 백그라운드 갱신
  if (url.origin === self.location.origin) {
    event.respondWith((async () => {
      const cache = await caches.open(CACHE_NAME);
      const cached = await cache.match(req);
      const fetched = fetch(req).then(res => {
        if (res && res.status === 200) cache.put(req, res.clone());
        return res;
      }).catch(() => null);
      return cached || fetched || Response.error();
    })());
    return;
  }

  // 외부(CDN) 파일: 네트워크 우선, 실패 시 캐시
  event.respondWith((async () => {
    const cache = await caches.open(CACHE_NAME);
    try {
      const res = await fetch(req, { mode: 'cors' });
      if (res && res.status === 200) cache.put(req, res.clone());
      return res;
    } catch {
      const cached = await cache.match(req, { ignoreSearch: true });
      return cached || Response.error();
    }
  })());
});
